//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using UnityEngine;
using UnityEngine.UI;
using System.Collections.Generic;
using System.Collections;
using DG.Tweening;

/// <summary>
/// 饭店内引导
/// </summary>
public class GuidePanel : UIBase
{
    public CanvasGroup Mask;

    public Button ClickArea;

    public Text Dir1, Dir2;
    public Transform Line;

    public Transform DirArea, TempArea, Hander;

    private Transform mPeopleIcon, mTextPanel;


    public HanderControl HanderControl { get; private set; }
    public TeampControl TempControl { get; private set; }

    public Action ClickAreaOnEvent;

    public Vector3 mPeopleHidePos { get; private set; } = new Vector3(-521f, 92f, 0);
    public Vector3 mPeopleShowPos { get; private set; } = new Vector3(-255f,92f, 0);
    public Vector3 mAreaPanelDefalutPos { get; private set; } = new Vector3(0, -571f, 0);


    public float MaskDefalutAlpha { get; private set; } = 1;

    public static float MaskAlpha { get; set; } = 1;
    [Header("火箭六方向")]
    public Transform bomb6;
    [Header("火箭四方向")]
    public Transform bomb4;
    [Header("火箭2方向")]
    public Transform bomb2;
    [Header("火箭上方")]
    public Transform bombUp;
    #region
    [Header("合并区域")]
    public Transform comBineArea;
    [Header("合并区域背景")]
    public Transform comBineAreaBg;
    [Header("数字")]
    public Transform number;
    [Header("背景图")]
    public Image BG;
    #endregion

    public override void Awake()
    {
        TempControl = new TeampControl();
        HanderControl = new HanderControl(Hander);

        mPeopleIcon = DirArea.Find("peopleIcon");
        mTextPanel = DirArea.Find("TextPanel");

        SetDirAreaPos(mAreaPanelDefalutPos);

        base.Awake();
    }

    private void Start()
    {        
        //ClickArea.AddOverrideListen(() => 
        //{
        //    ClickAreaOnEvent.Run();            
        //});       
    }

    public bool isClickArea = false;
    private void Update()
    {
        //if (isClickArea&&Input.GetKeyDown(KeyCode.Mouse0))
        //{
        //    ClickAreaOnEvent.Run();
        //    isClickArea = false;
        //    ClickAreaOnEvent = null;
        //}
    }

    public void SetInfo(string dir1,string dir2,Transform TempObj=null,Action oncomplete=null)
    {       
        if (TempObj!=null)
        {
            TempControl.AddTemp(TempObj);
            TempObj.SetParent(TempArea);
        }

        Dir1.text = null;
        Dir2.text = null;
        Line.HideCanvasGroup();
        
        StartCoroutine(IE_showDir(dir1, dir2, oncomplete));
    }

    public void SetInfo2(string dir1, string dir2,  List<Transform>TempObj = null, Action oncomplete = null)
    {
        if (TempObj != null)
        {
            foreach (var item in TempObj)
            {
                TempControl.AddTemp(item);
                item.SetParent(TempArea);
            }            
        }

        Dir1.text = null;
        Dir2.text = null;
        Line.HideCanvasGroup();
        StartCoroutine(IE_showDir(dir1, dir2, oncomplete));
    }


    //设置对话框位置
    public void SetDirAreaPos(Vector3 rectPos)
    {
        DirArea.GetComponent<RectTransform>().anchoredPosition = rectPos;
    }
    //显示火箭(2)炸弹位置
    public void SetBomb2Pos(Vector3 rectpos)
    {
        bomb2.ShowCanvasGroup();
        bomb2.position = rectpos;
    }
    //隐藏火箭（2）
    public void HideBomb2()
    {
        bomb2.HideCanvasGroup();
    }
    //显示火箭(4)炸弹位置
    public void SetBomb4Pos(Vector3 rectpos)
    {
        bomb4.ShowCanvasGroup();
        bomb4.position = rectpos;
    }
    //隐藏火箭（4）
    public void HideBomb4()
    {
        bomb4.HideCanvasGroup();
    }
    //显示火箭(6)炸弹位置
    public void SetBomb6Pos(Vector3 rectpos)  
    {
        bomb6.ShowCanvasGroup();
        bomb6.position = rectpos;
    }
    //隐藏火箭（6）
    public void HideBomb6()
    {
        bomb6.HideCanvasGroup();
    }
    //设置火箭(单向)炸弹位置
    public void SetBombUpShow(/*Vector3 rectpos*/)
    {
        bombUp.ShowCanvasGroup();
        //bombUp.position = rectpos;
    }
    private List<int> mlist_skip = new List<int>(10);           //不答应出来的序号
    private Dictionary<int, string> mDic_setcolorinfo = new Dictionary<int, string>(10);
    private char mChar1 = '<';
    private char mChar2 = '>';

    private IEnumerator IE_showDir(string dir1, string dir2, Action oncomplete)
    {
        yield return new WaitForSeconds(0.5f);
        var delay = new WaitForSeconds(0.02f);
        var length1 = dir1.Length;

        ////判断是否存在富文本
        ////欢迎来到火锅店，<color=red>游戏内有海量红包可领</color>，快去经营你的火锅店并领取红包吧！
        mlist_skip.Clear();
        mDic_setcolorinfo.Clear();

        int OneleftIndex = -1;
        int OneRightIndex = -1;
        int TwoLeftIndex = -1;
        int TwoRightIndex = -1;

        for (int i = 0; i < dir1.Length; i++)
        {
            var mcha = dir1[i];
            if (mcha== mChar1)
            {
                if (OneleftIndex<0)
                {
                    OneleftIndex = i;
                }
                else
                {
                    TwoLeftIndex = i;
                }
            }
            else if (mcha == mChar2)
            {
                if (OneRightIndex<0)
                {
                    OneRightIndex = i;
                }
                else
                {
                    TwoRightIndex = i;

                    Debug.LogError(OneleftIndex + "-" + OneRightIndex + "-" + TwoLeftIndex + "-" + TwoRightIndex);

                    //开始提取富文本内容
                    var tiphand = dir1.Substring(OneleftIndex, OneRightIndex - OneleftIndex + 1);
                    //Debug.LogError(tiphand);
                    var setdir=dir1.Substring(OneRightIndex+1,TwoLeftIndex - OneRightIndex-1);
                    //Debug.LogError(setdir);
                    var tipend = dir1.Substring(TwoLeftIndex, TwoRightIndex - TwoLeftIndex+1);                    
                    //Debug.LogError(tipend);

                    for (int k = 0; k < setdir.Length; k++)
                    {
                        mDic_setcolorinfo.Add(OneRightIndex + 1 + k, tiphand + setdir[k] + tipend);
                    }

                    for (int k = 0; k < tiphand.Length; k++)
                    {
                        mlist_skip.Add(OneleftIndex + k);
                    }
                    for (int k = 0; k < tipend.Length; k++)
                    {
                        mlist_skip.Add(TwoLeftIndex + k);
                    }


                    OneleftIndex = -1;
                    OneRightIndex = -1;
                    TwoLeftIndex = -1;
                    TwoRightIndex = -1;
                }
            }            
        }

        string showText = null;
        for (int i = 0; i < length1; i++)
        {
            if (!mlist_skip.Contains(i))
            {
                string str = null;
                if (mDic_setcolorinfo.ContainsKey(i))
                {
                   str=mDic_setcolorinfo[i];
                }
                else
                {
                    str = dir1[i].ToString();
                }
                showText += str;
                Dir1.text = showText;
                yield return delay;
            }
        }

        yield return delay;
        if (!string.IsNullOrEmpty(dir2))
        {
            Line.ShowCanvasGroup();
        }
        Dir2.text = dir2;
        oncomplete.Run();
        yield return null;
    }

    
    public override void Show()
    {
        StopAllCoroutines();
        Mask.alpha = 0;
        mPeopleIcon.GetComponent<RectTransform>().anchoredPosition = mPeopleHidePos;
        mTextPanel.HideCanvasGroup();

        //base.Show();
        canvasGroup.interactable = true;
        canvasGroup.blocksRaycasts = true;
        canvasGroup.alpha = 1;
        Debug.LogError(">>>>" + MaskAlpha);
        Mask.DOFade(MaskAlpha, 0.3f);
        mPeopleIcon.GetComponent<RectTransform>().DOAnchorPos(mPeopleShowPos, 0.5f).SetEase(Ease.OutBack);
        mTextPanel.ShowCanvasGroup();
        this.transform.SetAsLastSibling();

        InitBomb();
    }

    //初始化火箭
    public void InitBomb() 
    {
        bomb2.HideCanvasGroup();
        bomb4.HideCanvasGroup();
        bomb6.HideCanvasGroup();
        bombUp.HideCanvasGroup();
    }

    public override void Hide()
    {
        //base.Hide();
        canvasGroup.interactable = false;
        canvasGroup.blocksRaycasts = false;
        canvasGroup.alpha = 0;

        HanderControl.Hide();
        StopAllCoroutines();
        MaskAlpha = MaskDefalutAlpha;
    }
}

/// <summary>
/// 临时对象层级变更控制类
/// </summary>
public class TeampControl
{
    private Dictionary<Transform, DefalutInfo> mdic_tempParentInfo = new Dictionary<Transform, DefalutInfo>(10);

    public void AddTemp(Transform temp)
    {
        if (!mdic_tempParentInfo.ContainsKey(temp))
        {
            mdic_tempParentInfo.Add(temp,new DefalutInfo(temp));
        }
    }

    public void RecoverTemp(Transform temp)
    {
        if (mdic_tempParentInfo.ContainsKey(temp))
        {
            mdic_tempParentInfo[temp].Recover(temp);
        }
        mdic_tempParentInfo.Remove(temp);
    }

    public void RecoverAllTemp()
    {
        foreach (var item in mdic_tempParentInfo)
        {
            item.Value.Recover(item.Key);
        }

        mdic_tempParentInfo.Clear();
    }
}


public class DefalutInfo
{
    public Transform Parent;
    public Vector3 pos;
    public Quaternion rotation;

    public DefalutInfo(Transform mtrans)
    {
        Parent = mtrans.parent;
        pos = mtrans.localPosition;
        rotation = mtrans.rotation;
    }

    public void Recover(Transform mtras)
    {
        mtras.SetParent(Parent);
        mtras.localPosition = pos;
        mtras.rotation = rotation;
    }
}

/// <summary>
/// 手指控制
/// </summary>
public class HanderControl
{
    public Transform Hander;
    private Vector3 mDefalutScale;

    public HanderControl(Transform hander)
    {
        Hander = hander;
        mDefalutScale= hander.localScale;
        hander.HideCanvasGroup();
    }

    public void SetPos(Vector3 pos)
    {
        Hander.position = pos;
    }

    public void Show()
    {
        Hander.GetCanvasGroup().DOFade(1, 0.3f);
        ShowAni();
        
    }

    public void Hide()
    {
        Hander.GetCanvasGroup().DOFade(0, 0.3f);
        StopAni();
    }


    private Sequence seq;
    private void ShowAni()
    {
        Hander.localScale = mDefalutScale;
        var smallscale = mDefalutScale * 0.8f;
        seq = DOTween.Sequence();
        seq.Append(Hander.DOScale(smallscale, 0.5f));
        seq.Append(Hander.DOScale(mDefalutScale, 0.5f));
        seq.SetLoops(-1);
    }

    private void StopAni()
    {
        seq.Kill();
        Hander.localScale = mDefalutScale;
    }
}

