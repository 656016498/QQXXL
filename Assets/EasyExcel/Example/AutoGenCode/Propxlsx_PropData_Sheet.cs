//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EasyExcel.
//     Runtime Version: 4.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
using EasyExcel;

namespace EasyExcelGenerated
{
	[Serializable]
	public class PropData : EERowData
	{
		[EEKeyField]
		[SerializeField]
		private string _ID;
		public string ID { get { return _ID; } }

		[SerializeField]
		private float[] _Gear1Size1;
		public float[] Gear1Size1 { get { return _Gear1Size1; } }

		[SerializeField]
		private float[] _Gear1Size2;
		public float[] Gear1Size2 { get { return _Gear1Size2; } }

		[SerializeField]
		private float[] _Gear1Size3;
		public float[] Gear1Size3 { get { return _Gear1Size3; } }

		[SerializeField]
		private float _ShackLevel11;
		public float ShackLevel11 { get { return _ShackLevel11; } }

		[SerializeField]
		private float _ShackLevel12;
		public float ShackLevel12 { get { return _ShackLevel12; } }

		[SerializeField]
		private float _ShackLevel13;
		public float ShackLevel13 { get { return _ShackLevel13; } }

		[SerializeField]
		private float _ShackTime11;
		public float ShackTime11 { get { return _ShackTime11; } }

		[SerializeField]
		private float _ShackTime12;
		public float ShackTime12 { get { return _ShackTime12; } }

		[SerializeField]
		private float _ShackTime13;
		public float ShackTime13 { get { return _ShackTime13; } }

		[SerializeField]
		private float[] _Gear2Size1;
		public float[] Gear2Size1 { get { return _Gear2Size1; } }

		[SerializeField]
		private float[] _Gear2Size2;
		public float[] Gear2Size2 { get { return _Gear2Size2; } }

		[SerializeField]
		private float[] _Gear2Size3;
		public float[] Gear2Size3 { get { return _Gear2Size3; } }

		[SerializeField]
		private float _ShackLevel21;
		public float ShackLevel21 { get { return _ShackLevel21; } }

		[SerializeField]
		private float _ShackLevel22;
		public float ShackLevel22 { get { return _ShackLevel22; } }

		[SerializeField]
		private float _ShackLevel23;
		public float ShackLevel23 { get { return _ShackLevel23; } }

		[SerializeField]
		private float _ShackTime21;
		public float ShackTime21 { get { return _ShackTime21; } }

		[SerializeField]
		private float _ShackTime22;
		public float ShackTime22 { get { return _ShackTime22; } }

		[SerializeField]
		private float _ShackTime23;
		public float ShackTime23 { get { return _ShackTime23; } }

		[SerializeField]
		private float[] _Gear3Size1;
		public float[] Gear3Size1 { get { return _Gear3Size1; } }

		[SerializeField]
		private float[] _Gear3Size2;
		public float[] Gear3Size2 { get { return _Gear3Size2; } }

		[SerializeField]
		private float[] _Gear3Size3;
		public float[] Gear3Size3 { get { return _Gear3Size3; } }

		[SerializeField]
		private float _ShackLevel31;
		public float ShackLevel31 { get { return _ShackLevel31; } }

		[SerializeField]
		private float _ShackLevel32;
		public float ShackLevel32 { get { return _ShackLevel32; } }

		[SerializeField]
		private float _ShackLevel33;
		public float ShackLevel33 { get { return _ShackLevel33; } }

		[SerializeField]
		private float _ShackTime31;
		public float ShackTime31 { get { return _ShackTime31; } }

		[SerializeField]
		private float _ShackTime32;
		public float ShackTime32 { get { return _ShackTime32; } }

		[SerializeField]
		private float _ShackTime33;
		public float ShackTime33 { get { return _ShackTime33; } }

		[SerializeField]
		private float _Effect11;
		public float Effect11 { get { return _Effect11; } }

		[SerializeField]
		private float _Effect12;
		public float Effect12 { get { return _Effect12; } }

		[SerializeField]
		private float _Effect13;
		public float Effect13 { get { return _Effect13; } }

		[SerializeField]
		private float _Effect21;
		public float Effect21 { get { return _Effect21; } }

		[SerializeField]
		private float _Effect22;
		public float Effect22 { get { return _Effect22; } }

		[SerializeField]
		private float _Effect23;
		public float Effect23 { get { return _Effect23; } }

		[SerializeField]
		private float _Effect31;
		public float Effect31 { get { return _Effect31; } }

		[SerializeField]
		private float _Effect32;
		public float Effect32 { get { return _Effect32; } }

		[SerializeField]
		private float _Effect33;
		public float Effect33 { get { return _Effect33; } }

		[SerializeField]
		private int _MarsSquareGear1;
		public int MarsSquareGear1 { get { return _MarsSquareGear1; } }

		[SerializeField]
		private int _MarsSquareGear2;
		public int MarsSquareGear2 { get { return _MarsSquareGear2; } }

		[SerializeField]
		private int _MarsSquareGear3;
		public int MarsSquareGear3 { get { return _MarsSquareGear3; } }

		[SerializeField]
		private float[] _GBombGear1Size1;
		public float[] GBombGear1Size1 { get { return _GBombGear1Size1; } }

		[SerializeField]
		private float[] _GBombGear1Size2;
		public float[] GBombGear1Size2 { get { return _GBombGear1Size2; } }

		[SerializeField]
		private float[] _GBombGear1Size3;
		public float[] GBombGear1Size3 { get { return _GBombGear1Size3; } }

		[SerializeField]
		private float[] _GBombGear2Size1;
		public float[] GBombGear2Size1 { get { return _GBombGear2Size1; } }

		[SerializeField]
		private float[] _GBombGear2Size2;
		public float[] GBombGear2Size2 { get { return _GBombGear2Size2; } }

		[SerializeField]
		private float[] _GBombGear2Size3;
		public float[] GBombGear2Size3 { get { return _GBombGear2Size3; } }

		[SerializeField]
		private float[] _GBombGear3Size1;
		public float[] GBombGear3Size1 { get { return _GBombGear3Size1; } }

		[SerializeField]
		private float[] _GBombGear3Size2;
		public float[] GBombGear3Size2 { get { return _GBombGear3Size2; } }

		[SerializeField]
		private float[] _GBombGear3Size3;
		public float[] GBombGear3Size3 { get { return _GBombGear3Size3; } }


		public PropData()
		{
		}

#if UNITY_EDITOR
		public PropData(List<List<string>> sheet, int row, int column)
		{
			TryParse(sheet[row][column++], out _ID);
			string[] _Gear1Size1Array = sheet[row][column++].Split(',');
			int _Gear1Size1Count = _Gear1Size1Array.Length;
			_Gear1Size1 = new float[_Gear1Size1Count];
			for(int i = 0; i < _Gear1Size1Count; i++)
				TryParse(_Gear1Size1Array[i], out _Gear1Size1[i]);
			string[] _Gear1Size2Array = sheet[row][column++].Split(',');
			int _Gear1Size2Count = _Gear1Size2Array.Length;
			_Gear1Size2 = new float[_Gear1Size2Count];
			for(int i = 0; i < _Gear1Size2Count; i++)
				TryParse(_Gear1Size2Array[i], out _Gear1Size2[i]);
			string[] _Gear1Size3Array = sheet[row][column++].Split(',');
			int _Gear1Size3Count = _Gear1Size3Array.Length;
			_Gear1Size3 = new float[_Gear1Size3Count];
			for(int i = 0; i < _Gear1Size3Count; i++)
				TryParse(_Gear1Size3Array[i], out _Gear1Size3[i]);
			TryParse(sheet[row][column++], out _ShackLevel11);
			TryParse(sheet[row][column++], out _ShackLevel12);
			TryParse(sheet[row][column++], out _ShackLevel13);
			TryParse(sheet[row][column++], out _ShackTime11);
			TryParse(sheet[row][column++], out _ShackTime12);
			TryParse(sheet[row][column++], out _ShackTime13);
			string[] _Gear2Size1Array = sheet[row][column++].Split(',');
			int _Gear2Size1Count = _Gear2Size1Array.Length;
			_Gear2Size1 = new float[_Gear2Size1Count];
			for(int i = 0; i < _Gear2Size1Count; i++)
				TryParse(_Gear2Size1Array[i], out _Gear2Size1[i]);
			string[] _Gear2Size2Array = sheet[row][column++].Split(',');
			int _Gear2Size2Count = _Gear2Size2Array.Length;
			_Gear2Size2 = new float[_Gear2Size2Count];
			for(int i = 0; i < _Gear2Size2Count; i++)
				TryParse(_Gear2Size2Array[i], out _Gear2Size2[i]);
			string[] _Gear2Size3Array = sheet[row][column++].Split(',');
			int _Gear2Size3Count = _Gear2Size3Array.Length;
			_Gear2Size3 = new float[_Gear2Size3Count];
			for(int i = 0; i < _Gear2Size3Count; i++)
				TryParse(_Gear2Size3Array[i], out _Gear2Size3[i]);
			TryParse(sheet[row][column++], out _ShackLevel21);
			TryParse(sheet[row][column++], out _ShackLevel22);
			TryParse(sheet[row][column++], out _ShackLevel23);
			TryParse(sheet[row][column++], out _ShackTime21);
			TryParse(sheet[row][column++], out _ShackTime22);
			TryParse(sheet[row][column++], out _ShackTime23);
			string[] _Gear3Size1Array = sheet[row][column++].Split(',');
			int _Gear3Size1Count = _Gear3Size1Array.Length;
			_Gear3Size1 = new float[_Gear3Size1Count];
			for(int i = 0; i < _Gear3Size1Count; i++)
				TryParse(_Gear3Size1Array[i], out _Gear3Size1[i]);
			string[] _Gear3Size2Array = sheet[row][column++].Split(',');
			int _Gear3Size2Count = _Gear3Size2Array.Length;
			_Gear3Size2 = new float[_Gear3Size2Count];
			for(int i = 0; i < _Gear3Size2Count; i++)
				TryParse(_Gear3Size2Array[i], out _Gear3Size2[i]);
			string[] _Gear3Size3Array = sheet[row][column++].Split(',');
			int _Gear3Size3Count = _Gear3Size3Array.Length;
			_Gear3Size3 = new float[_Gear3Size3Count];
			for(int i = 0; i < _Gear3Size3Count; i++)
				TryParse(_Gear3Size3Array[i], out _Gear3Size3[i]);
			TryParse(sheet[row][column++], out _ShackLevel31);
			TryParse(sheet[row][column++], out _ShackLevel32);
			TryParse(sheet[row][column++], out _ShackLevel33);
			TryParse(sheet[row][column++], out _ShackTime31);
			TryParse(sheet[row][column++], out _ShackTime32);
			TryParse(sheet[row][column++], out _ShackTime33);
			TryParse(sheet[row][column++], out _Effect11);
			TryParse(sheet[row][column++], out _Effect12);
			TryParse(sheet[row][column++], out _Effect13);
			TryParse(sheet[row][column++], out _Effect21);
			TryParse(sheet[row][column++], out _Effect22);
			TryParse(sheet[row][column++], out _Effect23);
			TryParse(sheet[row][column++], out _Effect31);
			TryParse(sheet[row][column++], out _Effect32);
			TryParse(sheet[row][column++], out _Effect33);
			TryParse(sheet[row][column++], out _MarsSquareGear1);
			TryParse(sheet[row][column++], out _MarsSquareGear2);
			TryParse(sheet[row][column++], out _MarsSquareGear3);
			string[] _GBombGear1Size1Array = sheet[row][column++].Split(',');
			int _GBombGear1Size1Count = _GBombGear1Size1Array.Length;
			_GBombGear1Size1 = new float[_GBombGear1Size1Count];
			for(int i = 0; i < _GBombGear1Size1Count; i++)
				TryParse(_GBombGear1Size1Array[i], out _GBombGear1Size1[i]);
			string[] _GBombGear1Size2Array = sheet[row][column++].Split(',');
			int _GBombGear1Size2Count = _GBombGear1Size2Array.Length;
			_GBombGear1Size2 = new float[_GBombGear1Size2Count];
			for(int i = 0; i < _GBombGear1Size2Count; i++)
				TryParse(_GBombGear1Size2Array[i], out _GBombGear1Size2[i]);
			string[] _GBombGear1Size3Array = sheet[row][column++].Split(',');
			int _GBombGear1Size3Count = _GBombGear1Size3Array.Length;
			_GBombGear1Size3 = new float[_GBombGear1Size3Count];
			for(int i = 0; i < _GBombGear1Size3Count; i++)
				TryParse(_GBombGear1Size3Array[i], out _GBombGear1Size3[i]);
			string[] _GBombGear2Size1Array = sheet[row][column++].Split(',');
			int _GBombGear2Size1Count = _GBombGear2Size1Array.Length;
			_GBombGear2Size1 = new float[_GBombGear2Size1Count];
			for(int i = 0; i < _GBombGear2Size1Count; i++)
				TryParse(_GBombGear2Size1Array[i], out _GBombGear2Size1[i]);
			string[] _GBombGear2Size2Array = sheet[row][column++].Split(',');
			int _GBombGear2Size2Count = _GBombGear2Size2Array.Length;
			_GBombGear2Size2 = new float[_GBombGear2Size2Count];
			for(int i = 0; i < _GBombGear2Size2Count; i++)
				TryParse(_GBombGear2Size2Array[i], out _GBombGear2Size2[i]);
			string[] _GBombGear2Size3Array = sheet[row][column++].Split(',');
			int _GBombGear2Size3Count = _GBombGear2Size3Array.Length;
			_GBombGear2Size3 = new float[_GBombGear2Size3Count];
			for(int i = 0; i < _GBombGear2Size3Count; i++)
				TryParse(_GBombGear2Size3Array[i], out _GBombGear2Size3[i]);
			string[] _GBombGear3Size1Array = sheet[row][column++].Split(',');
			int _GBombGear3Size1Count = _GBombGear3Size1Array.Length;
			_GBombGear3Size1 = new float[_GBombGear3Size1Count];
			for(int i = 0; i < _GBombGear3Size1Count; i++)
				TryParse(_GBombGear3Size1Array[i], out _GBombGear3Size1[i]);
			string[] _GBombGear3Size2Array = sheet[row][column++].Split(',');
			int _GBombGear3Size2Count = _GBombGear3Size2Array.Length;
			_GBombGear3Size2 = new float[_GBombGear3Size2Count];
			for(int i = 0; i < _GBombGear3Size2Count; i++)
				TryParse(_GBombGear3Size2Array[i], out _GBombGear3Size2[i]);
			string[] _GBombGear3Size3Array = sheet[row][column++].Split(',');
			int _GBombGear3Size3Count = _GBombGear3Size3Array.Length;
			_GBombGear3Size3 = new float[_GBombGear3Size3Count];
			for(int i = 0; i < _GBombGear3Size3Count; i++)
				TryParse(_GBombGear3Size3Array[i], out _GBombGear3Size3[i]);
		}
#endif
		public override void OnAfterSerialized()
		{
		}
	}

	public class Propxlsx_PropData_Sheet : EERowDataCollection
	{
		[SerializeField]
		private List<PropData> elements = new List<PropData>();

		public override void AddData(EERowData data)
		{
			elements.Add(data as PropData);
		}

		public override int GetDataCount()
		{
			return elements.Count;
		}

		public override EERowData GetData(int index)
		{
			return elements[index];
		}

		public override void OnAfterSerialized()
		{
			foreach (var element in elements)
				element.OnAfterSerialized();
		}
	}
}
