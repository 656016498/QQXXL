//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EasyExcel.
//     Runtime Version: 4.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
using EasyExcel;

namespace EasyExcelGenerated
{
	[Serializable]
	public class LargeCashConfig : EERowData
	{
		[EEKeyField]
		[SerializeField]
		private int _CoinNum;
		public int CoinNum { get { return _CoinNum; } }

		[SerializeField]
		private float _ADmin;
		public float ADmin { get { return _ADmin; } }

		[SerializeField]
		private float _ADmax;
		public float ADmax { get { return _ADmax; } }

		[SerializeField]
		private float _AD;
		public float AD { get { return _AD; } }

		[SerializeField]
		private float _Total;
		public float Total { get { return _Total; } }

		[SerializeField]
		private int _FM;
		public int FM { get { return _FM; } }


		public LargeCashConfig()
		{
		}

#if UNITY_EDITOR
		public LargeCashConfig(List<List<string>> sheet, int row, int column)
		{
			TryParse(sheet[row][column++], out _CoinNum);
			TryParse(sheet[row][column++], out _ADmin);
			TryParse(sheet[row][column++], out _ADmax);
			TryParse(sheet[row][column++], out _AD);
			TryParse(sheet[row][column++], out _Total);
			TryParse(sheet[row][column++], out _FM);
		}
#endif
		public override void OnAfterSerialized()
		{
		}
	}

	public class MainConfig_LargeCashConfig_Sheet : EERowDataCollection
	{
		[SerializeField]
		private List<LargeCashConfig> elements = new List<LargeCashConfig>();

		public override void AddData(EERowData data)
		{
			elements.Add(data as LargeCashConfig);
		}

		public override int GetDataCount()
		{
			return elements.Count;
		}

		public override EERowData GetData(int index)
		{
			return elements[index];
		}

		public override void OnAfterSerialized()
		{
			foreach (var element in elements)
				element.OnAfterSerialized();
		}
	}
}
