//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EasyExcel.
//     Runtime Version: 4.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
using EasyExcel;

namespace EasyExcelGenerated
{
	[Serializable]
	public class RedSchduleSection : EERowData
	{
		[EEKeyField]
		[SerializeField]
		private int _id;
		public int id { get { return _id; } }

		[SerializeField]
		private int _linesId;
		public int linesId { get { return _linesId; } }

		[SerializeField]
		private float _progressAlue;
		public float progressAlue { get { return _progressAlue; } }

		[SerializeField]
		private float[] _min;
		public float[] min { get { return _min; } }

		[SerializeField]
		private float[] _max;
		public float[] max { get { return _max; } }


		public RedSchduleSection()
		{
		}

#if UNITY_EDITOR
		public RedSchduleSection(List<List<string>> sheet, int row, int column)
		{
			TryParse(sheet[row][column++], out _id);
			TryParse(sheet[row][column++], out _linesId);
			TryParse(sheet[row][column++], out _progressAlue);
			string[] _minArray = sheet[row][column++].Split(',');
			int _minCount = _minArray.Length;
			_min = new float[_minCount];
			for(int i = 0; i < _minCount; i++)
				TryParse(_minArray[i], out _min[i]);
			string[] _maxArray = sheet[row][column++].Split(',');
			int _maxCount = _maxArray.Length;
			_max = new float[_maxCount];
			for(int i = 0; i < _maxCount; i++)
				TryParse(_maxArray[i], out _max[i]);
		}
#endif
		public override void OnAfterSerialized()
		{
		}
	}

	public class RedWithdrawConfig_RedSchduleSection_Sheet : EERowDataCollection
	{
		[SerializeField]
		private List<RedSchduleSection> elements = new List<RedSchduleSection>();

		public override void AddData(EERowData data)
		{
			elements.Add(data as RedSchduleSection);
		}

		public override int GetDataCount()
		{
			return elements.Count;
		}

		public override EERowData GetData(int index)
		{
			return elements[index];
		}

		public override void OnAfterSerialized()
		{
			foreach (var element in elements)
				element.OnAfterSerialized();
		}
	}
}
