//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EasyExcel.
//     Runtime Version: 4.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
using EasyExcel;

namespace EasyExcelGenerated
{
	[Serializable]
	public class RedSection : EERowData
	{
		[EEKeyField]
		[SerializeField]
		private int _ID;
		public int ID { get { return _ID; } }

		[SerializeField]
		private int _Section;
		public int Section { get { return _Section; } }

		[SerializeField]
		private int _Min;
		public int Min { get { return _Min; } }

		[SerializeField]
		private int _Max;
		public int Max { get { return _Max; } }

		[SerializeField]
		private int _MinComfort;
		public int MinComfort { get { return _MinComfort; } }

		[SerializeField]
		private int _MaxComfort;
		public int MaxComfort { get { return _MaxComfort; } }


		public RedSection()
		{
		}

#if UNITY_EDITOR
		public RedSection(List<List<string>> sheet, int row, int column)
		{
			TryParse(sheet[row][column++], out _ID);
			TryParse(sheet[row][column++], out _Section);
			TryParse(sheet[row][column++], out _Min);
			TryParse(sheet[row][column++], out _Max);
			TryParse(sheet[row][column++], out _MinComfort);
			TryParse(sheet[row][column++], out _MaxComfort);
		}
#endif
		public override void OnAfterSerialized()
		{
		}
	}

	public class RedWithdrawConfig_RedSection_Sheet : EERowDataCollection
	{
		[SerializeField]
		private List<RedSection> elements = new List<RedSection>();

		public override void AddData(EERowData data)
		{
			elements.Add(data as RedSection);
		}

		public override int GetDataCount()
		{
			return elements.Count;
		}

		public override EERowData GetData(int index)
		{
			return elements[index];
		}

		public override void OnAfterSerialized()
		{
			foreach (var element in elements)
				element.OnAfterSerialized();
		}
	}
}
