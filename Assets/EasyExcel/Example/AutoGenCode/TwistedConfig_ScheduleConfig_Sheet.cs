//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EasyExcel.
//     Runtime Version: 4.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
using EasyExcel;

namespace EasyExcelGenerated
{
	[Serializable]
	public class ScheduleConfig : EERowData
	{
		[EEKeyField]
		[SerializeField]
		private int _id;
		public int id { get { return _id; } }

		[SerializeField]
		private float _ecpm;
		public float ecpm { get { return _ecpm; } }

		[SerializeField]
		private float[] _pro;
		public float[] pro { get { return _pro; } }

		[SerializeField]
		private float[] _profits;
		public float[] profits { get { return _profits; } }

		[SerializeField]
		private float[] _showRed;
		public float[] showRed { get { return _showRed; } }


		public ScheduleConfig()
		{
		}

#if UNITY_EDITOR
		public ScheduleConfig(List<List<string>> sheet, int row, int column)
		{
			TryParse(sheet[row][column++], out _id);
			TryParse(sheet[row][column++], out _ecpm);
			string[] _proArray = sheet[row][column++].Split(',');
			int _proCount = _proArray.Length;
			_pro = new float[_proCount];
			for(int i = 0; i < _proCount; i++)
				TryParse(_proArray[i], out _pro[i]);
			string[] _profitsArray = sheet[row][column++].Split(',');
			int _profitsCount = _profitsArray.Length;
			_profits = new float[_profitsCount];
			for(int i = 0; i < _profitsCount; i++)
				TryParse(_profitsArray[i], out _profits[i]);
			string[] _showRedArray = sheet[row][column++].Split(',');
			int _showRedCount = _showRedArray.Length;
			_showRed = new float[_showRedCount];
			for(int i = 0; i < _showRedCount; i++)
				TryParse(_showRedArray[i], out _showRed[i]);
		}
#endif
		public override void OnAfterSerialized()
		{
		}
	}

	public class TwistedConfig_ScheduleConfig_Sheet : EERowDataCollection
	{
		[SerializeField]
		private List<ScheduleConfig> elements = new List<ScheduleConfig>();

		public override void AddData(EERowData data)
		{
			elements.Add(data as ScheduleConfig);
		}

		public override int GetDataCount()
		{
			return elements.Count;
		}

		public override EERowData GetData(int index)
		{
			return elements[index];
		}

		public override void OnAfterSerialized()
		{
			foreach (var element in elements)
				element.OnAfterSerialized();
		}
	}
}
