//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EasyExcel.
//     Runtime Version: 4.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
using EasyExcel;

namespace EasyExcelGenerated
{
	[Serializable]
	public class WithdrawConfig : EERowData
	{
		[EEKeyField]
		[SerializeField]
		private int _id;
		public int id { get { return _id; } }

		[SerializeField]
		private int _withdrawType;
		public int withdrawType { get { return _withdrawType; } }

		[SerializeField]
		private float _gold;
		public float gold { get { return _gold; } }

		[SerializeField]
		private int _cost;
		public int cost { get { return _cost; } }

		[SerializeField]
		private string _key;
		public string key { get { return _key; } }

		[SerializeField]
		private int _dayCashNum;
		public int dayCashNum { get { return _dayCashNum; } }


		public WithdrawConfig()
		{
		}

#if UNITY_EDITOR
		public WithdrawConfig(List<List<string>> sheet, int row, int column)
		{
			TryParse(sheet[row][column++], out _id);
			TryParse(sheet[row][column++], out _withdrawType);
			TryParse(sheet[row][column++], out _gold);
			TryParse(sheet[row][column++], out _cost);
			TryParse(sheet[row][column++], out _key);
			TryParse(sheet[row][column++], out _dayCashNum);
		}
#endif
		public override void OnAfterSerialized()
		{
		}
	}

	public class RedWithdrawConfig_WithdrawConfig_Sheet : EERowDataCollection
	{
		[SerializeField]
		private List<WithdrawConfig> elements = new List<WithdrawConfig>();

		public override void AddData(EERowData data)
		{
			elements.Add(data as WithdrawConfig);
		}

		public override int GetDataCount()
		{
			return elements.Count;
		}

		public override EERowData GetData(int index)
		{
			return elements[index];
		}

		public override void OnAfterSerialized()
		{
			foreach (var element in elements)
				element.OnAfterSerialized();
		}
	}
}
